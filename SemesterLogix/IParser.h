
#pragma once
#ifndef IPDFPARSER_H
#define IPDFPARSER_H

// Fichier : IPdfParser.h
// GPA434 – Laboratoire 3
// Création :
// - E. Surprenant
// - M. Boudreau
// - 2020/11/01
// - - - - - - - - - - - - - - - - - - - - - - -

#pragma region Includes
#pragma warning(push ,2)
#include <QFile>
#include <QCoreApplication>
#include <Qtextstream>
#include <QDebug>
#include <QRegularExpression>
#include <QStringList>
#include "Course.h"

#pragma warning(pop)

#include <fstream>

#pragma endregion

class IParser
{
#pragma region Structures
protected:
	struct containString
	{
		std::string key;
		containString(std::string const& i) : key(i) { }

		bool operator()(std::string const& i)
		{
			return (key.find(i) != std::string::npos);
		}
	};
#pragma endregion

#pragma region Members
protected:
	QString mPdfFilepath;
	QString mAppDataFolder;
	QString mPdfToTextProg;
	QString mTextfilePath;
	QStringList mQCleanList;
#pragma endregion

#pragma region Ctor/Dtor
public:
	IParser();
	virtual ~IParser();
	IParser(IParser const&) = default;
#pragma endregion

#pragma region Getters/Setters
private:

public:
	QString GetPdfFilepath() { return mPdfFilepath; }
	void SetPdfFilepath(QString pdffilepath) { 
		mPdfFilepath = pdffilepath; }
#pragma endregion

#pragma region Operators
public:
	IParser& operator=(IParser const&) = default;
#pragma endregion

#pragma region Functions
protected:

	/// <summary>
	/// Remove all unwated string literals from text file generated by program.
	/// </summary>
	/// <param name="filename"></param>
	virtual void CleanTextFile() = 0;


	/// <summary>
	/// Parse date from text file.
	/// </summary>
	/// <param name="fileName"></param>
	/// <param name="mCourseList"></param>
	/// <returns></returns>
	virtual QList<QObject*> ParseDataFromText() = 0;

public:

	/// <summary>
	/// Called by qml when user inputs the pdf
	///  </summary>
	void PdfToText();

	/// <summary>
	/// Exctract data from text file 
	/// </summary>
	QList<QObject*> ExtractData();



	/// <summary>
	/// Function to erase all line macthing the given string.
	/// </summary>
	/// <param name="path">Path to the text file</param>
	/// <param name="eraseLine">Match string</param>
	void EraseFileLine(std::string path, std::string eraseLine);

	/// <summary>
    /// Function to erase all line matching the string in the given vector.
    /// </summary>
    /// <param name="path">Path to the text file</param>
    /// <param name="eraseLine">Vector containing the match strings</param>
	void EraseFileLines(std::string path, std::vector< std::string> trashList);
	void EraseFileLines(QString, QList<QString>);


	/// <summary>
	/// 
	/// </summary>
	/// <param name="path"></param>
	/// <param name="startString"></param>
	/// <param name="endString"></param>
	void CropFromString(std::string path, std::string startString, std::string endString);

	#pragma endregion

#pragma region Slots
private slots:


public slots:

#pragma endregion


};

#endif // IPDFPARSER_H

